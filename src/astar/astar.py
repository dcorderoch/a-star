"""
this is an implementation of the A-star algorithm
"""

from board import *

def main():
    """
    this is the main function called when running this script
    """
    # works
    goal = ((-1, -1, -1, 0), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4))

    # start is goal
    start = ((-1, -1, -1, 0), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4))

    #start = ((-1, -1, -1, 4), (3, 0, 1, 2), (3, 4, 2, 3), (1, 1, 1, 2), (4, 4, 2, 3))

    # works (no change)
    #start = ((-1, -1, -1, 0), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4))

    # works (all single rotation)
    #start = ((-1, -1, -1, 0), (4, 1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4))
    #start = ((-1, -1, -1, 0), (1, 2, 3, 4), (4, 1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4))
    #start = ((-1, -1, -1, 0), (1, 2, 3, 4), (1, 2, 3, 4), (4, 1, 2, 3), (1, 2, 3, 4))
    #start = ((-1, -1, -1, 0), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (4, 1, 2, 3))

    # works (double rotations)
    #start = ((-1, -1, -1, 0), (3, 4, 1, 2), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4))
    #start = ((-1, -1, -1, 0), (1, 2, 3, 4), (3, 4, 1, 2), (1, 2, 3, 4), (1, 2, 3, 4))
    #start = ((-1, -1, -1, 0), (1, 2, 3, 4), (1, 2, 3, 4), (3, 4, 1, 2), (1, 2, 3, 4))
    #start = ((-1, -1, -1, 0), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (3, 4, 1, 2))

    # works (space move)
    #start = ((-1, -1, -1, 4), (1, 2, 3, 0), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4))
    #start = ((-1, -1, -1, 4), (1, 2, 3, 4), (1, 2, 3, 0), (1, 2, 3, 4), (1, 2, 3, 4))
    #start = ((-1, -1, -1, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 0), (1, 2, 3, 4))
    #start = ((-1, -1, -1, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 0))

    # works (space move, and rotation)
    #start = ((-1, -1, -1, 4), (0, 1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4))
    #start = ((-1, -1, -1, 4), (1, 2, 3, 4), (0, 1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4))
    #start = ((-1, -1, -1, 4), (1, 2, 3, 4), (1, 2, 3, 4), (0, 1, 2, 3), (1, 2, 3, 4))
    #start = ((-1, -1, -1, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (0, 1, 2, 3))

    # works (space move, and rotation)
    #start = ((-1, -1, -1, 4), (2, 3, 0, 1), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4))
    #start = ((-1, -1, -1, 4), (1, 2, 3, 4), (2, 3, 0, 1), (1, 2, 3, 4), (1, 2, 3, 4))
    #start = ((-1, -1, -1, 4), (1, 2, 3, 4), (1, 2, 3, 4), (2, 3, 0, 1), (1, 2, 3, 4))
    #start = ((-1, -1, -1, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (2, 3, 0, 1))

    # works (space move, double rotation)
    #start = ((-1, -1, -1, 3), (4, 1, 2, 4), (1, 2, 3, 0), (1, 2, 3, 4), (1, 2, 3, 4))
    #start = ((-1, -1, -1, 3), (1, 2, 3, 0), (4, 1, 2, 4), (1, 2, 3, 4), (1, 2, 3, 4))
    #start = ((-1, -1, -1, 3), (1, 2, 3, 0), (1, 2, 3, 4), (4, 1, 2, 4), (1, 2, 3, 4))
    #start = ((-1, -1, -1, 3), (1, 2, 3, 0), (1, 2, 3, 4), (1, 2, 3, 4), (4, 1, 2, 4))

    # works (takes ~90s) (6 steps)
    #start = ((-1, -1, -1, 2), (3, 4, 1, 4), (3, 2, 1, 2), (1, 2, 3, 4), (1, 0, 3, 4))
    # works (7 steps)
    #start = ((-1, -1, -1, 2), (3, 0, 1, 4), (3, 4, 1, 2), (1, 2, 3, 4), (4, 1, 2, 3))

    # works (11 steps)
    #start = ((-1, -1, -1, 4), (1, 2, 3, 4), (3, 0, 2, 3), (1, 1, 1, 2), (4, 4, 2, 3))

    # works (14 steps)
    start = ((-1, -1, -1, 4), (3, 0, 1, 2), (3, 4, 2, 3), (1, 1, 1, 2), (4, 4, 2, 3))

    # the most extreme case
    #start = ((-1, -1, -1, 0), (4, 4, 4, 4), (1, 1, 1, 1), (2, 2, 2, 2), (3, 3, 3, 3))

    print(f'new start: {start}')
    print(f'new goal: {goal}')

    # x = start's free space's col, same for initial_y
    board_solver = BoardSolver(start=start, goal=goal)
    board_solver.solve()
    print('the path is')
    for i, state in enumerate(board_solver.path):
        for row in state:
            print(f'step:{i}) {row}')

if __name__ == "__main__":
    main()
